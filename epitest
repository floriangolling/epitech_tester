#!/bin/bash

show_help() {
    echo "Usage: epitest [-g|--graphic] <command>"
    echo ""
    echo "Options:"
    echo "  -g, --graphic   Enable graphical mode (useful for CSFML projects)"
    echo "  -h, --help      Show this help message and exit"
    echo ""
    echo "Example:"
    echo "  epitest ./a.out                 # Run an executable"
    echo "  epitest \"make re && ./a.out\"    # Run multiple commands"
    echo "  epitest -g ./my_hunter          # Run in graphical mode"
    exit 0
}

if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed. Please install it and try again."
    exit 1
fi

GRAPHIC_MODE=false
CMD=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -g|--graphic)
            GRAPHIC_MODE=true
            ;;
        -h|--help)
            show_help
            ;;
        *)
            CMD+=("$1")
            ;;
    esac
    shift
done

if [[ ${#CMD[@]} -eq 0 ]]; then
    show_help
fi

BASE_EXEC_CMD="docker"
DOCKER_SOCKET_PATH=/var/run/docker.sock
HAS_SOCKET_ACCESS=$(test -r $DOCKER_SOCKET_PATH; echo "$?")

if [ $HAS_SOCKET_ACCESS -ne 0 ]; then
    if ! grep -q "^docker:" /etc/group; then
        echo "Creating the 'docker' group..."
        sudo groupadd docker
    fi

    echo "WARNING: Socket access is denied"
    echo "To fix this we will add the current user to the docker group with: sudo usermod -a -G docker $USER"
    read -p "Do you want to proceed? (yes/no) " yn
    case $yn in
        yes | Y | y | Yes | YES)
            echo "Ok, proceeding..."
            sudo usermod -a -G docker $USER
            echo "You must reboot your computer for the changes to take effect";;
        no | N | n | No | NO)
            echo "Skipping...";;
        *)
            echo "Invalid response, skipping...";;
    esac
    BASE_EXEC_CMD="sudo ${BASE_EXEC_CMD}"
fi

IMAGE="epitechcontent/epitest-docker"

if docker image inspect "$IMAGE" &>/dev/null; then
    echo "Checking for updates..."
    docker pull "$IMAGE" | tee pull.log

    if grep -q "Downloaded newer image" pull.log; then
        echo "New image detected. Removing old version..."
        docker image prune -f
    fi

    rm pull.log
else
    echo "Image not found locally. Pulling it for the first time..."
    docker pull "$IMAGE"
fi

DOCKER_RUN_OPTS=("--rm" "-it" "-v" "$(pwd):/app" "-w" "/app")
if [ "$GRAPHIC_MODE" = true ]; then
    echo "Enabling graphical mode..."

    # macOS config
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Detected macOS"
        if ! pgrep -i XQuartz &>/dev/null; then
            echo "Launching XQuartz..."
            open -a XQuartz
            sleep 5
        fi
        DOCKER_DISPLAY=host.docker.internal:0
        DOCKER_RUN_OPTS+=("-e" "DISPLAY=$DOCKER_DISPLAY" "-v" "/tmp/.X11-unix:/tmp/.X11-unix:rw" "-e" "LIBGL_ALWAYS_INDIRECT=1")
    else
        # For non-macOS
        xhost +local:docker
        DOCKER_RUN_OPTS+=("-e" "DISPLAY=$DISPLAY" "-v" "/tmp/.X11-unix:/tmp/.X11-unix:rw" "--net=host" )
    fi
fi

${BASE_EXEC_CMD} run "${DOCKER_RUN_OPTS[@]}" "$IMAGE" bash -c "${CMD[@]}"
